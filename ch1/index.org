** Exercise 1.1
#+BEGIN_SRC scheme
  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
          b
          a)
  (cond ((= a 4) 6)
            ((= b 4) (+ 6 7 a))
            (else 25))
  (+ 2 (if (> b a) b a))
  (* (cond ((> a b) a)
                   ((< a b) b)
                   (else -1))
     (+ a 1))
#+END_SRC

** Exercise 1.2
I've rewritten it in valid scheme-format.
#+BEGIN_SRC scheme
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* 3 (- 6 2) (- 2 7)))
#+END_SRC

** Exercise 1.3
#+BEGIN_SRC scheme
(define (square x) (* x x))

; A simple implementation
(define (sum-sqr-big-0 a b c)
        (cond ((> a b)
                          (cond ((> b c) (+ (square a) (square b)))
                                        (else    (+ (square a) (square c)))))
                  (else
                          (cond ((> c a) (+ (square b) (square c)))
                                    (else    (+ (square b) (square a)))))))

; a nicer way
(define (sum-of-square x y)
        (+ (square x) (square y)))

(define (bigger x y)
        (if (> x y)
                x
                y))

(define (smaller x y)
        (if (< x y)
                x
                y))

(define (sum-sqr-big-1 a b c)
        (sum-of-square (bigger a b)
                                   (bigger (smaller a b) c)))

#+END_SRC

** Exercise 1.4
=((if (> b 0) + -) a b)=
- if b > 0, then + is the operator and thus a + b is performed.
- otherwise, a - b is performed.

** Exercise 1.5
- For applicative-order evaluation, it'll enter a infinite loop. Because firstly interpreter will try to substitute (p) by (p) according to the definiton, but this will never end.
- For normal-order evaluation, the result is 0.
=(test 0 (p))= will be interpret as ~(if (= 0 0) 0 (p))~ and then 0, because the predicate expression is evaluated first, (p) will never be substitute.

** Exercise 1.6
Unfortunately, this =new-if= doesn't work as the special form =if=
does. The =new-if=, under current context, is no more than a
predefined procedure. So it'will behave just like other procedures :
calculate the value of the operands and then use these values to do
the procedures. No matter what result the predicate will produce, the
then-clause and the else-clause both get evaluated.

In the =sqrt-iter= program, use the =new-if= will cause the program to
run forever. The evaluation of =sqrt-root= will never end.

** Exercise 1.7
Use the code in the book, when calculating square root of small
numbers, like 0.0009, the interpreter output 0.04.

Instead of setting the absolute value that the answer's square and
radicand differs, we can use a value to restrict the ratio of the
error, say, 0.1%.
#+BEGIN_SRC scheme
(load "square-root.scm")

(define (good-enough? guess x)
  (< (abs (/ (-
              (square guess)
              x)
             x))
     0.001))
#+END_SRC
Using the new =good-enough= test, now the program
can produce answer much more accurate. For 0.0009,
the answer is 3.0000012746348552e-2.

** Exercise 1.8
#+BEGIN_SRC scheme
;; Newton's method for cube roots

(define (square x) (* x x))

(define (improve y x)
  (/ (+ (/ x
           (square y))
        (* 2 y))
     3))

(define (cube x) (* x (square x)))

(define (good-enough? guess x)
  (< (/ (abs (- (cube guess)
                x))
        x)
     0.001))

(define (cube-iter guess x)
  (if (good-enough? guess x)
      guess
      (cube-iter (improve guess x) x)))

(define (cube-root x)
  (cube-iter 1.0 x))
#+END_SRC

** Exercise 1.9
   + The first one :
     #+BEGIN_SRC scheme
       (+ 4 5)
       (inc (+ 3 5))
       (inc (inc (+ 2 5)))
       (inc (inc (inc (+ 1 5))))
       (inc (inc (inc (inc (+ 0 5)))))
       (inc (inc (inc (inc 5))))
       (inc (inc (inc 6)))
       (inc (inc 7))
       (inc 8)
       9
     #+END_SRC
     As we can see, this process fully expands then contracts and
     the length of the chain of deferred =inc= operations, with the
     amount of information needed to keep track of it, grows linearly
     with n. Therefore it's a linear recursive process.
   + The second one:
     #+BEGIN_SRC scheme
       (+ 4 5)
       (+ 3 6)
       (+ 2 7)
       (+ 1 8)
       (+ 0 9)
       9
     #+END_SRC
     This process does not grow and shrink, it's a linear iterative
     process.

** Exercise 1.10
   Use mathematical stuff, we can say that A is some kind of function
   f, s.t.,
   + f(anyvalue, 0) = 0
   + f(0, anyvalue) = 2 * anyvalue
   + f(anyvalue, 1) = 2
   + otherwise, f(x, y) = f(x-1, f(x, y-1))
   Using substitution model,
   #+BEGIN_SRC scheme
     ;; process (A 1 10)
     (A 1 10)
     (A 0 (A 1 9))
     (A 0 (A 0 (A 1 8)))
     (A 0 (A 0 (A 0 (A 1 7))))
     (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
        ...
        ...
     1024 ; 2 to the power of 10
     ;; seems f(1, n) = 2^n for n > 0


     ;; (A 2 4)
     (A 2 4)
     (A 1 (A 2 3))
     (A 1 (A 1 (A 2 2)))
     (A 1 (A 1 (A 1 (A 2 1))))
     (A 1 (A 1 (A 1 2)))
     (A 1 (A 1 (A 0 (A 1 1))))
     (A 1 (A 1 (A 0 2)))
     (A 1 (A 1 4))
     (A 1 (A 0 (A 1 3)))
     (A 1 (A 0 8))
     (A 1 16)
     65536 ; 2^16
     ;; notice the pattern here, f(2, n) = f(1, f(2, n-1)) = 2^f(2, n-1)

     (A 3 3)
     (A 2 (A 3 2))
     (A 2 (A 2 (A 3 1)))
     (A 2 (A 2 2))
     (A 2 4)
     65536
     ;; f(3, n) = f(2, f(3, n-1))
   #+END_SRC
   It's easy to see that,
   + =(f n)= computes 2*n
   + =(g n)= computes 2^n
   + =(h n)= computes 2^{2^{...}}, n layers of exponent.

** Exercise 1.11
#+BEGIN_SRC scheme
;; recursive

(define (f-recursive n) (f-rec-iter n))
(define (f-rec-iter n)
  (cond ((< n 3) n)
        (else (+ (f-rec-iter (- n 1))
                 (* 2
                    (f-rec-iter (- n 2)))
                 (* 3
                    (f-rec-iter (- n 3)))))))

;; iterative
(define (f-iterative n) (f-iter-iter 2 1 0 n))
(define (f-iter-iter a b c count)
  (if (= count 0)
      c
      (f-iter-iter (+ a
                      (* 2 b)
                      (* 3 c))
                   a
                   b
                   (- count 1))))

#+END_SRC
running the recursive version with n = 100 is like forever...Yet the
iterative version immediately return the answer.

** Exercise 1.12
The procedure =(pascal row col)= gives the element at the
corresponding row and column.
#+BEGIN_SRC scheme
;; recursive

(define (pascal row col)
  (if (or (= row 0)
          (= row 1)
          (= col 0)
          (= row col))
      1
      (+ (pascal (- row 1)
                 (- col 1))
         (pascal (- row 1)
                 col))))


;; iterative, a little mathematics

(define (pascal-iter row col)
  (if (or (= row 0)
          (= col 0)
          (= row 1)
          (= row col))
      1
      (pascal-iter-iter row 1 row col)))

;; this looks a little bit weird because I just don't wanna calculate the factorials

(define (pascal-iter-iter row deno num count)
  (if (= count 1) ;; do the division when count hits 1
      (/ num deno)
      (pascal-iter-iter (- row 1)
                        (* deno count)
                        (* num
                           (- row 1))
                        (- count 1))))
#+END_SRC

** Exercise 1.13
Just prove $\vert \frac{\psi^n}{\sqrt{5}}\vert < 0.5$.
** Exercise 1.14
#+CAPTION: from [[http://sicp.readthedocs.io/en/latest/_images/14.png][readthedocs]]
#+ATTR_HTML: :width 916px :height 696px
[[http://sicp.readthedocs.io/en/latest/_images/14.png]]
** Exercise 1.15
*** a
   Whenever angle is greater than 0.1, =p= will be called. 12.15 ->
   4.05 -> 1.35 -> 0.45 -> 0.15 -> 0.05 -> backtracking, so =p= is
   applied 5 times.

   On the other hand, we can use =trace-entry= to trace the procedure
   p.
#+BEGIN_SRC scheme
[Entering #[compound-procedure 2 p]
    Args: 4.9999999999999996e-2]
[Entering #[compound-procedure 2 p]
    Args: .1495]
[Entering #[compound-procedure 2 p]
    Args: .4351345505]
[Entering #[compound-procedure 2 p]
    Args: .9758465331678772]
[Entering #[compound-procedure 2 p]
    Args: -.7895631144708228]
;Value: -.39980345741334
#+END_SRC
*** b
    Every time the angle will be divided by 3 and it's a recursive
    procedure, the space and time complexity are all $O(\log_3a)$.
** Exercise 1.16
The strategy is:
+ if =n= is even, then we call the iterative procedure on squared =b=
  and halved =n=
+ else we update a to a times b, and call the iterative procedure on
  squared =b= and halved =n-1=.
#+INCLUDE: "ex1-16.scm" src scheme
** Exercise 1.17
** Exercise 1.18
#+INCLUDE: "ex1-17.scm" src scheme
Note that we have to handle the case when b is negative.
** Exercise 1.19
By applying the transform $T_{pq}$ twice, we can derive that the new
transform $T_{p'q'}$:
\begin{align*}
a &\leftarrow b(2pq+q^2) + a(2pq+q^2) + a(p^2+q^2) \\
b &\leftarrow b(p^2+q^2) + a(2pq+q^2)
\end{align*}
therefore,
\begin{align*}
p' &= p^2 + q^2 \\
q' &= 2pq + q^2
\end{align*}

#+INCLUDE: "ex1-19.scm" src scheme

** Exercise 1.20
For applicative order substitution, 4 times.
#+BEGIN_SRC scheme
  (gcd 206 40) ;(gcd 40 (remainder 206 40))
  (gcd 40 6)   ;(gcd 6 (remainder 40 6))
  (gcd 6 4)    ;(gcd 4 (remainder 6 4))
  (gcd 4 2)    ;(gcd 2 (remainder 4 2))
  (gcd 2 0)    ;no remainder call
  2
#+END_SRC
For normal order, use the following symbols to track the process,
+ t1 = (remainder 206 40) = 6, evaluation needs call =remainder= 1 time.
+ t2 = (remainder 40 t1) = 4, 2 times.
+ t3 = (remainder t1 t2) = 2, 4 times.
+ t4 = (remainder t2 t3) = 0, 7 times.
#+BEGIN_SRC scheme
  (gcd 206 40)

  (gcd 40 t1)

  if (= t1 0)   ;; #f +1

  (gcd t1 t2)

  if (= t2 0)  ;; #f +2

  (gcd t2 t3)

  if (= t3 0)  ;; #f +4

  (gcd t3 t4)

  if (= t4 0) ;; #t +7

  t3     ;; +4
#+END_SRC
18 times in total.
** Exercise 1.21
#+INCLUDE: "smallest-divisor.scm" src scheme
#+BEGIN_SRC scheme
1 ]=> (smallest-divisor 199)

;Value: 199

1 ]=> (smallest-divisor 1999)

;Value: 1999

1 ]=> (smallest-divisor 19999)

;Value: 7
#+END_SRC
** Exercise 1.22
We make some modifications to time-prime-test procedure so that it
only print out prime numbers. Use
=real-time-clock= to get the current time in miliseconds rather than
=runtime= (in seconds).
#+INCLUDE: "ex1-22.scm" src scheme
Searching for small prime numbers is really fast, it's hard to see the
difference. When searching big prime numbers, the growth of the time
cost conforms to growth of $\sqrt(10)$.
#+BEGIN_SRC scheme
1009 *** 0
1013 *** 0
1019 *** 0
10007 *** 0
10009 *** 1
10037 *** 0
100003 *** 0
100019 *** 1
100043 *** 0
1000003 *** 2
1000033 *** 2
1000037 *** 1
1000000007 *** 39
1000000009 *** 53
1000000021 *** 36
10000000019 *** 102
10000000033 *** 107
10000000061 *** 110
100000000003 *** 337
100000000019 *** 326
100000000057 *** 327
1000000000039 *** 1048
1000000000061 *** 1035
1000000000063 *** 1036
#+END_SRC
** Exercise 1.23
#+BEGIN_SRC scheme
1009 *** 0
1013 *** 0
1019 *** 0
10007 *** 0
10009 *** 0
10037 *** 0
100003 *** 0
100019 *** 0
100043 *** 0
1000003 *** 1
1000033 *** 1
1000037 *** 1
1000000007 *** 22
1000000009 *** 25
1000000021 *** 23
10000000019 *** 64
10000000033 *** 69
10000000061 *** 71
100000000003 *** 205
100000000019 *** 208
100000000057 *** 213
1000000000039 *** 673
1000000000061 *** 658
1000000000063 *** 654
#+END_SRC
Compared with exercise 1.22, we can find that the
=next= did bring some improvements, but not exactly
halved the running time. Well, my point is, the
exact executing time of the algorithm can be
affected by many other factors.
** Exercise 1.24
1. fast prime:
#+INCLUDE: "fast-prime.scm" src scheme
2. test
#+INCLUDE: "ex1-24.scm" src scheme
3. result
#+BEGIN_SRC scheme
1000000007 *** 67
1000000009 *** 76
1000000021 *** 64
10000000019 *** 79
10000000033 *** 82
10000000061 *** 82
100000000003 *** 85
100000000019 *** 84
100000000057 *** 86
1000000000039 *** 87
1000000000061 *** 93
1000000000063 *** 94
#+END_SRC
For every number, we run fermat test 1000 times
(just to make the time easier to compare). As we
can see, when the test number increase by 10
times, the extra time needed is approximately $log
10$.
** Exercise 1.25
Use the =fast-expt= procedure, a very large number
may be introduced to the function =remainder=, which
will definitely slow down the computation
markedly.
** Exercise 1.26
Louis's approach doesn't introduce a $\Theta(log n)$
process, but rather a $\Theta(n)$ process. Though
it does halve the =exp=, but the expmod has been
calculated twice.
** Exercise 1.27
#+INCLUDE: "ex1-27.scm" src scheme
They really fooled the test!
#+BEGIN_SRC scheme
561 Fooled.
1105 Fooled.
1729 Fooled.
2465 Fooled.
2821 Fooled.
6601 Fooled.
#+END_SRC
** Exercise 1.28
#+INCLUDE: "ex1-28.scm" src scheme
I did the test for 50 times, it worked quite well.
#+BEGIN_SRC scheme
561 is not a prime.
1105 is not a prime.
1729 is not a prime.
2465 is not a prime.
2821 is not a prime.
6601 is not a prime.
test true primes
1000000007 is prime.
1000000009 is prime.
1000000021 is prime.
10000000019 is prime.
#+END_SRC
** Exercise 1.29
Calculate the integral by Simpson's Rule:
#+INCLUDE: "simpson.scm" src scheme
Compare the result with the integral function provided in the book:
#+BEGIN_SRC scheme
1 ]=> (simpson-integral cube 0 1 100)

;Value: .25000000000000044

1 ]=> (integral cube 0 1 0.01)

;Value: .24998750000000042

1 ]=> (simpson-integral cube 0 1 1000)

;Value: .2500000000000006

1 ]=> (integral cube 0 1 0.001)

;Value: .249999875000001

#+END_SRC
As we can see, the result calculated via Simpson's Rule is much more
precise (0.25 is the ultimate answer).
** Exercise 1.30
Fill in the blanks.
#+INCLUDE: "sum-iter.scm" src scheme
** Exercise 1.31
Firstly define the product procedure.
#+INCLUDE: "product.scm" src scheme
Modified it to be a iterative process just like =sum=
#+INCLUDE: "product-iter.scm" src scheme
Use the product procedure to calculate factorial and approximate $\pi$,
#+INCLUDE: "ex1-31.scm" src scheme
Calculating the $\pi$ ! (use the iterative version, otherwise the
recursive depth may to too deep when n reaches numbers like 100000)
#+BEGIN_SRC scheme
1 ]=> (pi 10)
;Value: 3.3023935500125976
1 ]=> (pi 100)
;Value: 3.157339689217565
1 ]=> (pi 1000)
;Value: 3.143163842419198
1 ]=> (pi 10000)
;Value: 3.1417497371492673
#+END_SRC
** Exercise 1.32
It's getting more and more interesting! :).
#+INCLUDE: "accumulate.scm" src scheme
Once we have the implementation of =accumulate=, =sum= and =product= are
very easy to code!
#+INCLUDE: "ex1-32.scm" src scheme
** Exercise 1.33
We only need to make some minor modifications when use the combiner
to combine terms.
#+INCLUDE: "filtered-accumulate.scm" src scheme
Then we can solve the two problems.
#+INCLUDE: "ex1-33.scm" src scheme
** Exercise 1.34
The interpreter will utter an error, because when we evaluate =(f f)=
, the interpreter will try to do the following
#+BEGIN_SRC scheme
(f f)
(f 2)
(2 2); object 2 is not applicable !
#+END_SRC
** Exercise 1.35
The golden ratio $\varphi$ must satisfy the following equation:
\[
    \varphi^2 = \
varphi + 1
\]
Divides both side by $\varphi$ ($\varphi$ is a positive number),
\[
\varphi = 1 + \frac{1}{\varphi}
\]
Note that, this transfomation does converge (The monotone bounded
convergence theorem).

Use the following procedure to calculate the fixed point.
#+INCLUDE: "ex1-35.scm" src scheme
#+BEGIN_SRC scheme
1 ]=> golden-ratio
;Value: 1.6180339631667064
#+END_SRC
** Exercise 1.36
Print out the guess each time,
#+INCLUDE: "fixed-point-verbose.scm" src scheme
#+INCLUDE: "ex1-36.scm" src schem
Take a look at the result
#+BEGIN_SRC scheme
2.
9.965784284662087
3.004472209841214
6.279195757507157
3.759850702401539
5.215843784925895
4.182207192401397
4.8277650983445906
4.387593384662677
4.671250085763899
4.481403616895052
4.6053657460929
4.5230849678718865
4.577114682047341
4.541382480151454
4.564903245230833
4.549372679303342
4.559606491913287
4.552853875788271
4.557305529748263
4.554369064436181
4.556305311532999
4.555028263573554
4.555870396702851
4.555315001192079
4.5556812635433275
4.555439715736846
4.555599009998291
4.555493957531389
4.555563237292884
4.555517548417651
4.555547679306398
4.555527808516254
4.555540912917957
2.
5.9828921423310435
4.922168721308343
4.628224318195455
4.568346513136242
4.5577305909237005
4.555909809045131
4.555599411610624
4.5555465521473675
#+END_SRC
The version with average damping converges must faster!
** Exercise 1.37
For the recursive version, we must calculate it from outermost to
innermost. The iterative process just reverses.
#+INCLUDE: "cont-frac.scm" src scheme
Use the following procedure to do test
#+INCLUDE: "ex1-37.scm" src scheme
#+BEGIN_SRC scheme
1 ]=> (test 5)
;Value: 1.625
1 ]=> (test 6)
;Value: 1.6153846153846154
1 ]=> (test 10)
;Value: 1.6179775280898876
1 ]=> (test 11)
;Value: 1.6180555555555556
#+END_SRC
When $k \geq 11$, the approximation is accurate to 4 decimal places.
** Exercise 1.38
We only need a slightly different $D_i$ function, s.t.
\begin{equation*}
    D_i =
    \begin{cases}
    2k, & \text{if}\ i = 3k - 1, k \in \mathbb{N}^+ \\
    1, & \text{otherwise}
    \end{cases}
\end{equation*}
#+INCLUDE: "ex1-38.scm" src scheme
#+BEGIN_SRC scheme
1 ]=> (approx 1)
;Value: 3.
1 ]=> (approx 2)
;Value: 2.6666666666666665
1 ]=> (approx 5)
;Value: 2.71875
1 ]=> (approx 4)
;Value: 2.7142857142857144
#+END_SRC
As we can see, it converges very fast (k = 5 produces accuracy for 4
decimal places)
** Exercise 1.39
#+INCLUDE: "ex1-39.scm" src scheme
We can compare the result with the built-in =tan=
#+BEGIN_SRC scheme
1 ]=> (tan-cf 5 100)
;Value: -3.380515006246586
1 ]=> (tan 5)
;Value: -3.380515006246585
1 ]=> (tan-cf 22 100)
;Value: .00885165604168446
1 ]=> (tan 22)
;Value: .00885165604168446
#+END_SRC
** Exercise 1.40
Define =cubic= as a procedure with a,b,c as arguments and return a
procedure.
#+INCLUDE: "ex1-40.scm" src scheme
run some tests.
#+BEGIN_SRC scheme
1 ]=> (newtons-method (cubic 1 1 0) 1)
;Value: 1.7046374495392907e-18
1 ]=> (newtons-method (cubic 0 0 1) 1)
;Value: -.9999999999999982
#+END_SRC
** Exercise 1.41
#+INCLUDE: "ex1-41.scm" src scheme
#+BEGIN_SRC scheme
1 ]=> (((double (double double)) inc) 5)
;Value: 21
#+END_SRC
As we can see, the result is 5 + 16 = 21, so it apply the procedure
=inc= 16 times.

Let me explain this. =(double double)= gives us a procedure that
apply =double= twice, so =(double (double double))= gives us a procedure
that apply =double= 4 times. So we are gonna double =inc= 4 times. That
is, $1 * 2 * 2 * 2 * 2 = 16$.
** Exercise 1.42
#+INCLUDE: "compose.scm" src scheme
** Exercise 1.43
Using the =compose= procedure above, this is a piece of cake.
#+INCLUDE: "repeat.scm" src scheme
** Exercise 1.44
#+INCLUDE: "smooth.scm"
** Exercise 1.45
Here we use =repeat= procedure to define a exp function
#+INCLUDE: "exp.scm" src scheme
Then define the procedure to damp a function n times
#+INCLUDE: "damping.scm" src scheme
Now we need a function s.t., with take n and times as arguments,
return a function that can calculate the n-th roots of inputs with
=times= average damping
#+INCLUDE: "ex1-44.scm" src scheme
So we need to do some experiments to find out how many times of
damping are needed for calculating n-th root.

| n             | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | ... | 16 | ... |
|---------------+---+---+---+---+---+---+---+---+-----+----+-----|
| damping times | 1 | 1 | 2 | 2 | 2 | 2 | 3 | 3 | ... |  4 | ... |

As we can see, the minimum times of damping for the n-th root fixed point
iteration to converge is $\lfloor \lg n\rfloor$.

We need a $\lg$ function.
#+INCLUDE: "lg.scm" src scheme
Using procedures defined above, now we can finally get a generic
procedure for find n-th root
#+INCLUDE: "nth-root.scm" scheme
** Exercise 1.46
The =iterative-improve= procedure
#+INCLUDE: "iter-improve.scm" src scheme
Then we can redefine the =sqrt= and =fixed-point= procedure.
#+INCLUDE: "ex1-46.scm" src scheme
