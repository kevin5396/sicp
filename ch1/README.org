* Chatper 1
** Exercise 1.1:
#+BEGIN_SRC scheme
  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
          b
          a)
  (cond ((= a 4) 6)
            ((= b 4) (+ 6 7 a))
            (else 25))
  (+ 2 (if (> b a) b a))
  (* (cond ((> a b) a)
                   ((< a b) b)
                   (else -1))
     (+ a 1))
#+END_SRC

** Exercise 1.2:
I've rewritten it in valid scheme-format.
#+BEGIN_SRC scheme
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* 3 (- 6 2) (- 2 7)))
#+END_SRC

** Exercise 1.3:
#+BEGIN_SRC scheme
(define (square x) (* x x))

; A simple implementation
(define (sum-sqr-big-0 a b c)
        (cond ((> a b)
                          (cond ((> b c) (+ (square a) (square b)))
                                        (else    (+ (square a) (square c)))))
                  (else
                          (cond ((> c a) (+ (square b) (square c)))
                                    (else    (+ (square b) (square a)))))))

; a nicer way
(define (sum-of-square x y)
        (+ (square x) (square y)))

(define (bigger x y)
        (if (> x y)
                x
                y))

(define (smaller x y)
        (if (< x y)
                x
                y))

(define (sum-sqr-big-1 a b c)
        (sum-of-square (bigger a b)
                                   (bigger (smaller a b) c)))

#+END_SRC

** Exercise 1.4:
=((if (> b 0) + -) a b)=
- if b > 0, then + is the operator and thus a + b is performed.
- otherwise, a - b is performed.

** Exercise 1.5:
- For applicative-order evaluation, it'll enter a infinite loop. Because firstly interpreter will try to substitute (p) by (p) according to the definiton, but this will never end.
- For normal-order evaluation, the result is 0.
=(test 0 (p))= will be interpret as ~(if (= 0 0) 0 (p))~ and then 0, because the predicate expression is evaluated first, (p) will never be substitute.
