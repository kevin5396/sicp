* Chatper 1
** Exercise 1.1:
#+BEGIN_SRC scheme
  10
  (+ 5 3 4)
  (- 9 1)
  (/ 6 2)
  (+ (* 2 4) (- 4 6))
  (define a 3)
  (define b (+ a 1))
  (+ a b (* a b))
  (= a b)
  (if (and (> b a) (< b (* a b)))
          b
          a)
  (cond ((= a 4) 6)
            ((= b 4) (+ 6 7 a))
            (else 25))
  (+ 2 (if (> b a) b a))
  (* (cond ((> a b) a)
                   ((< a b) b)
                   (else -1))
     (+ a 1))
#+END_SRC

** Exercise 1.2:
I've rewritten it in valid scheme-format.
#+BEGIN_SRC scheme
(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5)))))
   (* 3 (- 6 2) (- 2 7)))
#+END_SRC

** Exercise 1.3:
#+BEGIN_SRC scheme
(define (square x) (* x x))

; A simple implementation
(define (sum-sqr-big-0 a b c)
        (cond ((> a b)
                          (cond ((> b c) (+ (square a) (square b)))
                                        (else    (+ (square a) (square c)))))
                  (else
                          (cond ((> c a) (+ (square b) (square c)))
                                    (else    (+ (square b) (square a)))))))

; a nicer way
(define (sum-of-square x y)
        (+ (square x) (square y)))

(define (bigger x y)
        (if (> x y)
                x
                y))

(define (smaller x y)
        (if (< x y)
                x
                y))

(define (sum-sqr-big-1 a b c)
        (sum-of-square (bigger a b)
                                   (bigger (smaller a b) c)))

#+END_SRC

** Exercise 1.4:
=((if (> b 0) + -) a b)=
- if b > 0, then + is the operator and thus a + b is performed.
- otherwise, a - b is performed.

** Exercise 1.5:
- For applicative-order evaluation, it'll enter a infinite loop. Because firstly interpreter will try to substitute (p) by (p) according to the definiton, but this will never end.
- For normal-order evaluation, the result is 0.
=(test 0 (p))= will be interpret as ~(if (= 0 0) 0 (p))~ and then 0, because the predicate expression is evaluated first, (p) will never be substitute.

** Exercise 1.6:
Unfortunately, this =new-if= doesn't work as the special form =if=
does. The =new-if=, under current context, is no more than a
predefined procedure. So it'will behave just like other procedures :
calculate the value of the operands and then use these values to do
the procedures. No matter what result the predicate will produce, the
then-clause and the else-clause both get evaluated.

In the =sqrt-iter= program, use the =new-if= will cause the program to
run forever. The evaluation of =sqrt-root= will never end.

** Exercise 1.7:
Use the code in the book, when calculating square root of small
numbers, like 0.0009, the interpreter output 0.04.

Instead of setting the absolute value that the answer's square and
radicand differs, we can use a value to restrict the ratio of the
error, say, 0.1%.
#+BEGIN_SRC scheme
(load "square-root.scm")

(define (good-enough? guess x)
  (< (abs (/ (-
              (square guess)
              x)
             x))
     0.001))
#+END_SRC
Using the new =good-enough= test, now the program
can produce answer much more accurate. For 0.0009,
the answer is 3.0000012746348552e-2.

** Exercise 1.8:
#+BEGIN_SRC scheme
;; Newton's method for cube roots

(define (square x) (* x x))

(define (improve y x)
  (/ (+ (/ x
           (square y))
        (* 2 y))
     3))

(define (cube x) (* x (square x)))

(define (good-enough? guess x)
  (< (/ (abs (- (cube guess)
                x))
        x)
     0.001))

(define (cube-iter guess x)
  (if (good-enough? guess x)
      guess
      (cube-iter (improve guess x) x)))

(define (cube-root x)
  (cube-iter 1.0 x))
#+END_SRC

** Exercise 1.9:
   + The first one :
     #+BEGIN_SRC scheme
       (+ 4 5)
       (inc (+ 3 5))
       (inc (inc (+ 2 5)))
       (inc (inc (inc (+ 1 5))))
       (inc (inc (inc (inc (+ 0 5)))))
       (inc (inc (inc (inc 5))))
       (inc (inc (inc 6)))
       (inc (inc 7))
       (inc 8)
       9
     #+END_SRC
     As we can see, this process fully expands then contracts and
     the length of the chain of deferred =inc= operations, with the
     amount of information needed to keep track of it, grows linearly
     with n. Therefore it's a linear recursive process.
   + The second one:
     #+BEGIN_SRC scheme
       (+ 4 5)
       (+ 3 6)
       (+ 2 7)
       (+ 1 8)
       (+ 0 9)
       9
     #+END_SRC
     This process does not grow and shrink, it's a linear iterative
     process.

** Exercise 1.10:
   Use mathematical stuff, we can say that A is some kind of function
   f, s.t.,
   + f(anyvalue, 0) = 0
   + f(0, anyvalue) = 2 * anyvalue
   + f(anyvalue, 1) = 2
   + otherwise, f(x, y) = f(x-1, f(x, y-1))
   Using substitution model,
   #+BEGIN_SRC scheme
     ;; process (A 1 10)
     (A 1 10)
     (A 0 (A 1 9))
     (A 0 (A 0 (A 1 8)))
     (A 0 (A 0 (A 0 (A 1 7))))
     (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
     (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
        ...
        ...
     1024 ; 2 to the power of 10
     ;; seems f(1, n) = 2^n for n > 0


     ;; (A 2 4)
     (A 2 4)
     (A 1 (A 2 3))
     (A 1 (A 1 (A 2 2)))
     (A 1 (A 1 (A 1 (A 2 1))))
     (A 1 (A 1 (A 1 2)))
     (A 1 (A 1 (A 0 (A 1 1))))
     (A 1 (A 1 (A 0 2)))
     (A 1 (A 1 4))
     (A 1 (A 0 (A 1 3)))
     (A 1 (A 0 8))
     (A 1 16)
     65536 ; 2^16
     ;; notice the pattern here, f(2, n) = f(1, f(2, n-1)) = 2^f(2, n-1)

     (A 3 3)
     (A 2 (A 3 2))
     (A 2 (A 2 (A 3 1)))
     (A 2 (A 2 2))
     (A 2 4)
     65536
     ;; f(3, n) = f(2, f(3, n-1))
   #+END_SRC
   It's easy to see that,
   + =(f n)= computes 2*n
   + =(g n)= computes 2^n
   + =(h n)= computes 2^{2^{...}}, n layers of exponent.

** Exercise 1.11:
#+BEGIN_SRC scheme
;; recursive

(define (f-recursive n) (f-rec-iter n))
(define (f-rec-iter n)
  (cond ((< n 3) n)
        (else (+ (f-rec-iter (- n 1))
                 (* 2
                    (f-rec-iter (- n 2)))
                 (* 3
                    (f-rec-iter (- n 3)))))))

;; iterative
(define (f-iterative n) (f-iter-iter 2 1 0 n))
(define (f-iter-iter a b c count)
  (if (= count 0)
      c
      (f-iter-iter (+ a
                      (* 2 b)
                      (* 3 c))
                   a
                   b
                   (- count 1))))

#+END_SRC
running the recursive version with n = 100 is like forever...Yet the
iterative version immediately return the answer.

** Exercise 1.12:
The procedure =(pascal row col)= gives the element at the
corresponding row and column.
#+BEGIN_SRC scheme
;; recursive

(define (pascal row col)
  (if (or (= row 0)
          (= row 1)
          (= col 0)
          (= row col))
      1
      (+ (pascal (- row 1)
                 (- col 1))
         (pascal (- row 1)
                 col))))


;; iterative, a little mathematics

(define (pascal-iter row col)
  (if (or (= row 0)
          (= col 0)
          (= row 1)
          (= row col))
      1
      (pascal-iter-iter row 1 row col)))

;; this looks a little bit weird because I just don't wanna calculate the factorials

(define (pascal-iter-iter row deno num count)
  (if (= count 1) ;; do the division when count hits 1
      (/ num deno)
      (pascal-iter-iter (- row 1)
                        (* deno count)
                        (* num
                           (- row 1))
                        (- count 1))))
#+END_SRC

** Exercise 1.13:
Just prove this,
[[file:ex1-13.png]]
